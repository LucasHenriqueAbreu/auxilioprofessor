// Mocks generated by Mockito 5.4.4 from annotations
// in auxilioprofessor/test/presenter/register/new_point_registration_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:auxilioprofessor/application/localization/geo_location_usecase.dart'
    as _i9;
import 'package:auxilioprofessor/application/point/save_new_point_usecase.dart'
    as _i6;
import 'package:auxilioprofessor/application/user/get_logged_in_user_usecase.dart'
    as _i8;
import 'package:auxilioprofessor/domain/entities/localization_entity.dart'
    as _i5;
import 'package:auxilioprofessor/domain/entities/user_entity.dart' as _i4;
import 'package:auxilioprofessor/domain/repositories/point_repository.dart'
    as _i2;
import 'package:auxilioprofessor/domain/repositories/user_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePointRepository_0 extends _i1.SmartFake
    implements _i2.PointRepository {
  _FakePointRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRepository_1 extends _i1.SmartFake
    implements _i3.UserRepository {
  _FakeUserRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_2 extends _i1.SmartFake implements _i4.User {
  _FakeUser_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalization_3 extends _i1.SmartFake implements _i5.Localization {
  _FakeLocalization_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SaveNewPointUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveNewPointUsecase extends _i1.Mock
    implements _i6.SaveNewPointUsecase {
  MockSaveNewPointUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PointRepository get pointRepository => (super.noSuchMethod(
        Invocation.getter(#pointRepository),
        returnValue: _FakePointRepository_0(
          this,
          Invocation.getter(#pointRepository),
        ),
      ) as _i2.PointRepository);

  @override
  _i7.Future<void> execute(_i6.SaveNewPointInput? input) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [input],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [GetLoggedInUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLoggedInUserUsecase extends _i1.Mock
    implements _i8.GetLoggedInUserUsecase {
  MockGetLoggedInUserUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_1(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i3.UserRepository);

  @override
  _i7.Future<_i4.User> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i7.Future<_i4.User>.value(_FakeUser_2(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i7.Future<_i4.User>);
}

/// A class which mocks [GetLocationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLocationUsecase extends _i1.Mock
    implements _i9.GetLocationUsecase {
  MockGetLocationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Localization> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i7.Future<_i5.Localization>.value(_FakeLocalization_3(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i7.Future<_i5.Localization>);
}
