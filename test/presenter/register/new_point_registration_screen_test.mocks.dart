// Mocks generated by Mockito 5.4.4 from annotations
// in auxilioprofessor/test/presenter/register/new_point_registration_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:auxilioprofessor/application/localization/geo_location_usecase.dart'
    as _i4;
import 'package:auxilioprofessor/application/point/save_new_point_usecase.dart'
    as _i2;
import 'package:auxilioprofessor/application/user/get_logged_in_user_usecase.dart'
    as _i3;
import 'package:auxilioprofessor/presenter/register/new_point_registration_controller.dart'
    as _i6;
import 'package:auxilioprofessor/presenter/register/state/register_state.dart'
    as _i7;
import 'package:flutter/foundation.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSaveNewPointUsecase_0 extends _i1.SmartFake
    implements _i2.SaveNewPointUsecase {
  _FakeSaveNewPointUsecase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetLoggedInUserUsecase_1 extends _i1.SmartFake
    implements _i3.GetLoggedInUserUsecase {
  _FakeGetLoggedInUserUsecase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetLocationUsecase_2 extends _i1.SmartFake
    implements _i4.GetLocationUsecase {
  _FakeGetLocationUsecase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_3<T> extends _i1.SmartFake
    implements _i5.ValueNotifier<T> {
  _FakeValueNotifier_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NewPointRegistrationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewPointRegistrationController extends _i1.Mock
    implements _i6.NewPointRegistrationController {
  MockNewPointRegistrationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SaveNewPointUsecase get saveNewPointUseCase => (super.noSuchMethod(
        Invocation.getter(#saveNewPointUseCase),
        returnValue: _FakeSaveNewPointUsecase_0(
          this,
          Invocation.getter(#saveNewPointUseCase),
        ),
      ) as _i2.SaveNewPointUsecase);

  @override
  _i3.GetLoggedInUserUsecase get getLoggedInUserUseCase => (super.noSuchMethod(
        Invocation.getter(#getLoggedInUserUseCase),
        returnValue: _FakeGetLoggedInUserUsecase_1(
          this,
          Invocation.getter(#getLoggedInUserUseCase),
        ),
      ) as _i3.GetLoggedInUserUsecase);

  @override
  _i4.GetLocationUsecase get getLocationUsecase => (super.noSuchMethod(
        Invocation.getter(#getLocationUsecase),
        returnValue: _FakeGetLocationUsecase_2(
          this,
          Invocation.getter(#getLocationUsecase),
        ),
      ) as _i4.GetLocationUsecase);

  @override
  _i5.ValueNotifier<_i7.NewPointState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeValueNotifier_3<_i7.NewPointState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.ValueNotifier<_i7.NewPointState>);

  @override
  _i8.Future<void> registerNewPoint() => (super.noSuchMethod(
        Invocation.method(
          #registerNewPoint,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
